//INDEX.html

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<script src="app.js"></script>
<link rel="stylesheet" href="styles.css">
<title>To Do List</title>
</head>
<body>
<header class="bg-success text-white p-5">
<div class="container">
<div class="row">
<div class="col-lg-12 col-md-12 col-sm-12">
<font face="Comic sans MS" size="11" color="red">
<strong>ToDo List</strong>
</font>
</div> </div> </div>
</header>
<div class="container mt-3">
<h2>Add Items</h2>
<label id="lblsuccess" class="text-success" style="display: none;">
</label>
<form id="addForm">
<div class="row">
<div class="col-lg-7 col-md-7 col-sm-7">
<input type="text" onkeyup="toggleButton(this, 'submit')"
class="form-control" id="item">
</div>
<div class="col-lg-5 col-md-5 col-sm-5">
<input type="submit" class="btn btn-dark" id="submit" value="Submit" disabled>
</div> </div> </form>
<h3 class="mt-4">Tasks</h3>
<form id="addForm">
<ul class="list-group" id="items"></ul>
</form></div> </body></html>



//app.js


window.onload = () => { const form1 = document.querySelector("#addForm");
    let items = document.getElementById("items");
    let submit = document.getElementById("submit");
    let editItem = null;
    form1.addEventListener("submit", addItem);
    items.addEventListener("click", removeItem);
    };
    function addItem(e) {
    e.preventDefault();
    if (submit.value != "Submit") {
    console.log("Hello");
    editItem.target.parentNode.childNodes[0].data = document.getElementById("item").value;
    submit.value = "Submit";
    document.getElementById("item").value = "";
    document.getElementById("lblsuccess").innerHTML = "Text edited successfully";
    document.getElementById("lblsuccess").style.display = "block";
    setTimeout(function() {
    document.getElementById("lblsuccess").style.display = "none";}, 3000);
    return false;
    }
    let newItem = document.getElementById("item").value;
    if (newItem.trim() == "" || newItem.trim() == null)
    return false;
    else
    document.getElementById("item").value = "";
    let li = document.createElement("li");
    li.className = "list-group-item";
    let deleteButton = document.createElement("button");
    deleteButton.className = "btn-danger btn btn-sm float-right delete";
    deleteButton.appendChild(document.createTextNode("Delete"));
    let editButton = document.createElement("button");
    editButton.className = "btn-success btn btn-sm float-right edit";
    editButton.appendChild(document.createTextNode("Edit"));
    li.appendChild(document.createTextNode(newItem));
    li.appendChild(deleteButton);
    li.appendChild(editButton);
    items.appendChild(li);
    }
    function removeItem(e) {
    e.preventDefault();
    if (e.target.classList.contains("delete")) {
    if (confirm("Are you Sure?")) {
    let li = e.target.parentNode;
    items.removeChild(li);
    document.getElementById("lblsuccess").innerHTML = "Text deleted successfully";
    document.getElementById("lblsuccess").style.display = "block";
    setTimeout(function() {
    document.getElementById("lblsuccess").style.display = "none";}, 3000);
    } }
    if (e.target.classList.contains("edit")) {
    document.getElementById("item").value = e.target.parentNode.childNodes[0].data;
    submit.value = "EDIT";
    editItem = e;
    } }
    function toggleButton(ref, btnID) {
    document.getElementById(btnID).disabled = false; }



// dbapp.js

import MongoClient from "mongodb";
// Connection URL and database name
const uri =
'mongodb+srv://hodit:123@cluster0.nza4ca7.mongodb.net/?retryWrites=true&w=majority';
const dbName = 'todolistapp';
// Create a new MongoClient
const MongoClient = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true
});
// Function to insert data into MongoDB
async function insertData() {
 try {
 // Connect to the MongoDB server
 await client.connect();
 // Select the database
 const db = client.db(dbName);
 // Create a collection (table)
 const collection = db.collection('taskslist');
 // Insert a document (row) into the collection
 const document = {
 id: 1,
 description: 'Online Session by 10.00 am',
 };
 const result = await collection.insertOne(document);

 console.log(`Inserted ${result.insertedCount} document(s)`);
 }
catch (error) {
 console.error('Error inserting data:', error);
 } }
// Function to retrieve data from MongoDB
async function retrieveData() {
 try {
 // Connect to the MongoDB server
 await client.connect();
 // Select the database
 const db = client.db(dbName);
 // Create a collection (table)
 const collection = db.collection('taskslist');
 // Find all documents in the collection
 const cursor = collection.find({id:1});
 // Iterate over the documents and print them
 await cursor.forEach(document => {
 console.log('Retrieved document:', document);
 });
 } catch (error) {
 console.error('Error retrieving data:', error);
 } finally {
 // Close the connection
 client.close();
 }
}
// Insert data into MongoDB
insertData();
// Retrieve data from MongoDB
retrieveData();



//style.css

body {
    font-family: Arial, sans-serif;
    }
    button {
    background-color: #007bff;
    color: #fff;
    border: none;
    padding: 10px 20px;
    font-size: 1rem;
    cursor: pointer;
    }
    button:hover {
    background-color: #0056b3;
    }
